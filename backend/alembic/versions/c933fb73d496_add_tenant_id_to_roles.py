"""add_tenant_id_to_roles

Revision ID: c933fb73d496
Revises: 9003ea70d4cb
Create Date: 2025-07-21 08:12:34.786639

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c933fb73d496'
down_revision: Union[str, None] = '9003ea70d4cb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Add column as nullable first
    op.add_column('roles', sa.Column('tenant_id', sa.UUID(), nullable=True))
    
    # Step 2: Get the default tenant ID (first tenant in the system)
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id FROM tenants LIMIT 1"))
    tenant_id = result.scalar()
    
    if tenant_id:
        # Step 3: Update existing roles with the default tenant ID
        op.execute(f"UPDATE roles SET tenant_id = '{tenant_id}' WHERE tenant_id IS NULL")
    
    # Step 4: Make the column NOT NULL
    op.alter_column('roles', 'tenant_id', nullable=False)
    
    # Step 5: Remove the unique constraint on name (now it's per tenant)
    op.drop_constraint('roles_name_key', 'roles', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('roles_name_key', 'roles', ['name'])
    op.drop_column('roles', 'tenant_id')
    # ### end Alembic commands ###
