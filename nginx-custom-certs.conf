events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:5173;
    }

    # Proxy headers for backend
    map $http_accept $backend_proxy {
        ~*application/json 1;
        default 0;
    }

    map $http_x_requested_with $ajax_proxy {
        XMLHttpRequest 1;
        default 0;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name industrace.local www.industrace.local;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name industrace.local www.industrace.local;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.crt;
        ssl_certificate_key /etc/nginx/ssl/key.key;
        ssl_trusted_certificate /etc/nginx/ssl/ca.crt;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Proxy headers for backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # API calls - requests with JSON accept header or X-Requested-With go to backend
        location ~ ^/(api/|health|admin|users|suppliers|manufacturers|locations|areas|sites|contacts|roles|tenants|dashboards|search|print|api-keys|setup|asset-photos|asset-documents|asset-types|asset-interfaces|asset-connections|connections|locations-floormap|pcap|asset-statuses|smtp-config|audit-logs|assets|dashboard|docs|redoc|openapi\.json)(/.*)?$ {
            # Check if this is an API call
            if ($backend_proxy = 1) {
                proxy_pass http://backend;
            }
            if ($ajax_proxy = 1) {
                proxy_pass http://backend;
            }
            # If it's a browser request (like F5 refresh), go to frontend
            try_files $uri $uri/ @frontend;
        }

        # Login/Logout API endpoints - only POST requests go to backend
        location ~ ^/(login|logout|refresh)$ {
            if ($request_method = POST) {
                proxy_pass http://backend;
            }
            # GET requests go to frontend for SPA routing
            try_files $uri $uri/ @frontend;
        }

        # External API
        location /external/v1/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files - Serve directly from frontend container
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache static files
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Named location for frontend fallback
        location @frontend {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Language $http_accept_language;
            proxy_set_header User-Agent $http_user_agent;
        }

        # Frontend - Everything else goes to frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Language $http_accept_language;
            proxy_set_header User-Agent $http_user_agent;
        }
    }
}